########################################################## {COPYRIGHT-TOP} ###
# Licensed Materials - Property of IBM
#
# 5725-E59
#
# (C) Copyright IBM Corp. 2013  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication, or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
########################################################## {COPYRIGHT-END} ###
########################################################## {COPYRIGHT-TOP} #####
# Licensed Materials - Property of IBM
#
# 5725-E59
#
# (C) Copyright IBM Corp. 2004, 2011 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication, or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
########################################################## {COPYRIGHT-END} #####
#------------------------------------------------------------------------------
# Properties for CustomerBusinessAdapter to connect to DWL Customer
#------------------------------------------------------------------------------
CustomerBusinessAdapter.JNDINAME=com/dwl/base/requestHandler/beans/DWLServiceController

#------------------------------------------------------------------------------
# Properties for EvergreenRule to connect to DWL Customer
#------------------------------------------------------------------------------
EvergreenRule.JNDINAME=com/dwl/base/requestHandler/beans/DWLServiceController

#Item migrated into Configuration Manager as of 8.0.
#Use Configuration.getConfiguration().getConfigItem() to read its value.
#
#MessageSender.QueueConnectionFactory=jms/EMQCF
# New name is: /IBM/EventManager/MessageSender/queueConnectionFactory
#MessageSender.Queue=jms/EMQueue
# New name is: /IBM/EventManager/MessageSender/queue
#Notification.Topic=jms/EMTopic
# New name is: /IBM/EventManager/Notification/topic
#EventManagerMemoryCache_time_to_live=200000
# New name is: /IBM/EventManager/MemoryCache/timeToLive

#---------------------------------------------------------
# DEFAULT LANGUAGE 
#
# This is the default locale set for the application. 
# All code tables require the language 
# as part of the lookup - cdlangtp.lang_tp_cd
#
locale_lang_id=100

#------------------------------------------------------------------------------
# SQL to retrieve next chunk of data from PCT for event detecting process.
# It should be modified according to the database to limit the maximum records 
# that the server can process for each chunk. E.g.
#
#  	DB2: select ..... where .... FETCH FIRST 2000 ROWS ONLY
#  	ORACLE: select ..... where .... AND ROWNUM < 2000
#------------------------------------------------------------------------------
AdapterDefDAO_findByPK=select ADAPTERDEF_ID, ADAPTERDEF_NAME, ADAPTERDEF_VENDOR, ADAPTERDEF_IMPL, DESCRIPTION, LAST_UPDATE_DT, LAST_UPDATE_USER from ADAPTERDEF where ADAPTERDEF_ID=?

AdapterDefDAO_findByEntityEventCatId=select o.ADAPTERDEF_ID, o.ADAPTERDEF_NAME, o.ADAPTERDEF_VENDOR, o.ADAPTERDEF_IMPL, o.DESCRIPTION, o.LAST_UPDATE_DT, o.LAST_UPDATE_USER from ADAPTERDEF o, ENTITYEVENTCAT e where o.ADAPTERDEF_ID=e.ADAPTERDEF_ID and e.ENTITYEVENTCAT_ID=?

EntityEventCatDAO_findByPK=select ENTITYEVENTCAT_ID, EVENT_CAT_CD, ADAPTERDEF_ID, PRODENTITY_ID, ENTEVENTCATOPT_ID, LAST_UPDATE_DT, LAST_UPDATE_USER from ENTITYEVENTCAT where ENTITYEVENTCAT_ID=?

EntityEventCatDAO_findByEventCatCd=select o.ENTITYEVENTCAT_ID, o.EVENT_CAT_CD, o.ADAPTERDEF_ID, o.PRODENTITY_ID, o.ENTEVENTCATOPT_ID, o.LAST_UPDATE_DT, o.LAST_UPDATE_USER from ENTITYEVENTCAT o, CDEVENTCAT ec where o.EVENT_CAT_CD=ec.EVENT_CAT_CD and ec.EVENT_CAT_CD=? and ec.LANG_TP_CD=?

EntityEventCatDAO_findByEventCatCdandProdEntityId=select o.ENTITYEVENTCAT_ID, o.EVENT_CAT_CD, o.ADAPTERDEF_ID, o.PRODENTITY_ID, o.ENTEVENTCATOPT_ID, o.LAST_UPDATE_DT, o.LAST_UPDATE_USER  from ENTITYEVENTCAT o, CDEVENTCAT ec, PRODENTITY p  where o.EVENT_CAT_CD=ec.EVENT_CAT_CD and ec.EVENT_CAT_CD=? and ec.LANG_TP_CD=? and o.PRODENTITY_ID=p.PRODENTITY_ID AND p.PRODENTITY_ID=?

EntityEventCatOptDAO_findByPK=select ENTEVENTCATOPT_ID, NAME, DESCRIPTION, LAST_UPDATE_DT, LAST_UPDATE_USER from ENTITYEVENTCATOPT where ENTEVENTCATOPT_ID=?

EventCategoryDAO_findByPK=select LANG_TP_CD, EVENT_CAT_CD, CATEGORY_NAME, EVENT_HORIZON, DESCRIPTION, EXPIRY_DT, LAST_UPDATE_DT, LAST_UPDATE_USER from cdeventcat where event_cat_cd=? and lang_tp_cd=?

EventCategoryDAO_findByExpiryDtandProdEntityId=select o.LANG_TP_CD, o.EVENT_CAT_CD, o.CATEGORY_NAME, o.EVENT_HORIZON, o.DESCRIPTION, o.EXPIRY_DT, o.LAST_UPDATE_DT, o.LAST_UPDATE_USER from cdeventcat o, entityeventcat e where (o.expiry_dt>? or o.expiry_dt is null) and o.event_cat_cd=e.event_cat_cd and e.prodentity_id=? and o.lang_tp_cd=?

EventCategoryDAO_findByExpiryDt=select LANG_TP_CD, EVENT_CAT_CD, CATEGORY_NAME, EVENT_HORIZON, DESCRIPTION, EXPIRY_DT, LAST_UPDATE_DT, LAST_UPDATE_USER from cdeventcat where (EXPIRY_DT> ? or EXPIRY_DT is null) and lang_tp_cd = ?

EventCategoryDAO_findByCategoryName=select LANG_TP_CD, EVENT_CAT_CD, CATEGORY_NAME, EVENT_HORIZON, DESCRIPTION, EXPIRY_DT, LAST_UPDATE_DT, LAST_UPDATE_USER from cdeventcat where category_name=? and lang_tp_cd=?

EventCategoryDAO_findByEventDefName=select c.LANG_TP_CD, c.EVENT_CAT_CD, c.CATEGORY_NAME, c.EVENT_HORIZON, c.DESCRIPTION, c.EXPIRY_DT, c.LAST_UPDATE_DT, c.LAST_UPDATE_USER from cdeventdeftp e, cdeventcat c where e.event_name=? and e.event_cat_cd=c.event_cat_cd and e.lang_tp_cd=c.lang_tp_cd and e.lang_tp_cd=?

EventCategoryDAO_getRulesByCategoryName=select distinct r.RULE_ID from CDEVENTCAT c, CDEVENTDEFTP e, EVENTDEFEXTRULE r where c.category_name=? and (e.EXPIRY_DT> ? or e.EXPIRY_DT is null) and c.EVENT_CAT_CD=e.EVENT_CAT_CD and r.EVENTDEF_TP_CD=e.EVENTDEF_TP_CD and c.lang_tp_cd=? and e.lang_tp_cd=?

EventCategoryDAO_getRulesByEventCatCd=select distinct r.RULE_ID from CDEVENTCAT c, CDEVENTDEFTP e, EVENTDEFEXTRULE r where c.EVENT_CAT_CD=? and (e.EXPIRY_DT> ? or e.EXPIRY_DT is null) and c.EVENT_CAT_CD=e.EVENT_CAT_CD and r.EVENTDEF_TP_CD=e.EVENTDEF_TP_CD and c.lang_tp_cd=? and e.lang_tp_cd=?

EventCategoryDAO_findByEventDefCdandExpiryDtandLangId=select c.LANG_TP_CD, c.EVENT_CAT_CD, c.CATEGORY_NAME, c.EVENT_HORIZON, c.DESCRIPTION, c.EXPIRY_DT, c.LAST_UPDATE_DT, c.LAST_UPDATE_USER from cdeventdeftp e, cdeventcat c where e.eventdef_tp_cd=? and e.event_cat_cd=c.event_cat_cd and e.lang_tp_cd= c.lang_tp_cd and (c.EXPIRY_DT> ? or c.EXPIRY_DT is null) and e.lang_tp_cd= ?

EventCategoryDAO_findByEventNameandExpiryDt=select c.LANG_TP_CD, c.EVENT_CAT_CD, c.CATEGORY_NAME, c.EVENT_HORIZON, c.DESCRIPTION, c.EXPIRY_DT, c.LAST_UPDATE_DT, c.LAST_UPDATE_USER from cdeventdeftp e, cdeventcat c where e.event_name=? and e.event_cat_cd=c.event_cat_cd and e.lang_tp_cd= c.lang_tp_cd and (c.EXPIRY_DT> ? or c.EXPIRY_DT is null)

EventCategoryDAO_findByEventNameandExpiryDtandLangId=select c.LANG_TP_CD, c.EVENT_CAT_CD, c.CATEGORY_NAME, c.EVENT_HORIZON, c.DESCRIPTION, c.EXPIRY_DT, c.LAST_UPDATE_DT, c.LAST_UPDATE_USER from cdeventdeftp e, cdeventcat c where e.event_name=? and e.event_cat_cd=c.event_cat_cd and e.lang_tp_cd= c.lang_tp_cd and (c.EXPIRY_DT> ? or c.EXPIRY_DT is null) and e.lang_tp_cd= ?

EventDAO_findActiveByEventDefName=select e.EVENT_ID, e.PROCESSACTION_ID, e.EVENTDEF_TP_CD, e.DESCRIPTION, e.EVENT_TRIGGER, e.CREATED_DT, e.END_DT, e.LAST_UPDATE_DT, e.LAST_UPDATE_USER, o.EVENT_NAME, o.ENABLE_NOTIFY from EVENT e, CDEVENTDEFTP o where (o.EVENT_NAME=? and (e.END_DT > ? or e.END_DT is null) and o.lang_tp_cd=?)

EventDAO_findByEventName=select e.EVENT_ID, e.PROCESSACTION_ID, e.EVENTDEF_TP_CD, e.DESCRIPTION, e.EVENT_TRIGGER, e.CREATED_DT, e.END_DT, e.LAST_UPDATE_DT, e.LAST_UPDATE_USER, o.EVENT_NAME, o.ENABLE_NOTIFY from EVENT e, CDEVENTDEFTP o where (o.EVENTDEF_TP_CD=e.EVENTDEF_TP_CD and o.EVENT_NAME=? and o.lang_tp_cd=?)

EventDAO_findByPK=select e.EVENT_ID, e.PROCESSACTION_ID, e.EVENTDEF_TP_CD, e.DESCRIPTION, e.EVENT_TRIGGER, e.CREATED_DT, e.END_DT, e.LAST_UPDATE_DT, e.LAST_UPDATE_USER, o.EVENT_NAME, o.ENABLE_NOTIFY from EVENT e, CDEVENTDEFTP o where (o.EVENTDEF_TP_CD=e.EVENTDEF_TP_CD and e.EVENT_ID=? and o.lang_tp_cd=?)

EventDAO_findByProcessControlId=select e.EVENT_ID, e.PROCESSACTION_ID, e.EVENTDEF_TP_CD, e.DESCRIPTION, e.EVENT_TRIGGER, e.CREATED_DT, e.END_DT, e.LAST_UPDATE_DT, e.LAST_UPDATE_USER, o.EVENT_NAME, o.ENABLE_NOTIFY  from event e, CDEVENTDEFTP o, ProcessAction pa, ProcessControl pce where e.EVENTDEF_TP_CD=o.EVENTDEF_TP_CD and e.PROCESSACTION_ID=pa.PROCESSACTION_ID and pa.PROCESSCON_ID=pce.PROCESSCON_ID and pce.PROCESSCON_ID=? and o.lang_tp_cd=?

EventDAO_findByProcessControlIdandEndDt=select e.EVENT_ID, e.PROCESSACTION_ID, e.EVENTDEF_TP_CD, e.DESCRIPTION, e.EVENT_TRIGGER, e.CREATED_DT, e.END_DT, e.LAST_UPDATE_DT, e.LAST_UPDATE_USER, o.EVENT_NAME, o.ENABLE_NOTIFY from EVENT e, CDEVENTDEFTP o, PROCESSACTION pa, PROCESSCONTROL pc where e.EVENTDEF_TP_CD=o.EVENTDEF_TP_CD and e.PROCESSACTION_ID=pa.PROCESSACTION_ID and pa.PROCESSCON_ID=pc.PROCESSCON_ID and pc.PROCESSCON_ID=? and (e.END_DT> ? or e.END_DT is null) and o.lang_tp_cd=?

EventDefinitionDAO_findByPK=select LANG_TP_CD, EVENTDEF_TP_CD, EVENT_CAT_CD, EVENT_NAME, ENABLE_NOTIFY, DESCRIPTION, EXPIRY_DT, LAST_UPDATE_DT, LAST_UPDATE_USER  from CDEVENTDEFTP where eventdef_tp_cd=? and lang_tp_cd=?

EventDefinitionDAO_findAllEventDefByCategoryName=select o.LANG_TP_CD, o.EVENTDEF_TP_CD, o.EVENT_CAT_CD, o.EVENT_NAME, o.ENABLE_NOTIFY, o.DESCRIPTION, o.EXPIRY_DT, o.LAST_UPDATE_DT, o.LAST_UPDATE_USER from CDEVENTDEFTP o, CDEVENTCAT e where o.LANG_TP_CD=e.LANG_TP_CD and o.EVENT_CAT_CD=e.EVENT_CAT_CD and e.CATEGORY_NAME=?

EventDefinitionDAO_findByEventName=select LANG_TP_CD, EVENTDEF_TP_CD, EVENT_CAT_CD, EVENT_NAME, ENABLE_NOTIFY, DESCRIPTION, EXPIRY_DT, LAST_UPDATE_DT, LAST_UPDATE_USER from CDEVENTDEFTP where event_name=? and lang_tp_cd=?

EventDefinitionDAO_getRuleByEventDefName=select distinct r.RULE_ID from CDEVENTDEFTP e, EVENTDEFEXTRULE r where e.EVENT_NAME=? and r.EVENTDEF_TP_CD=e.EVENTDEF_TP_CD and e.lang_tp_cd=?

EventDefinitionDAO_getRuleByEventDefCd=select distinct r.RULE_ID from CDEVENTDEFTP e, EVENTDEFEXTRULE r where e.EVENTDEF_TP_CD=? and r.EVENTDEF_TP_CD=e.EVENTDEF_TP_CD and e.lang_tp_cd=?

ProcessActionDAO_findByNextProcessDtandEventStatusandEntityEventCatId=select PROCESSACTION_ID, PROCESSCON_ID, ENTITYEVENTCAT_ID, NEXT_PROCESS_DT, EVENT_STATUS, LAST_UPDATE_DT, LAST_UPDATE_USER from PROCESSACTION where NEXT_PROCESS_DT< ? and EVENT_STATUS=? and ENTITYEVENTCAT_ID=?

ProcessActionDAO_findByNextProcessDtandEventStatusandEventCatCd=select o.PROCESSACTION_ID, o.PROCESSCON_ID, o.ENTITYEVENTCAT_ID, o.NEXT_PROCESS_DT, o.EVENT_STATUS, o.LAST_UPDATE_DT, o.LAST_UPDATE_USER from PROCESSACTION o, ENTITYEVENTCAT e, CDEVENTCAT c where o.NEXT_PROCESS_DT< ? and o.EVENT_STATUS=? and o.ENTITYEVENTCAT_ID=e.ENTITYEVENTCAT_ID and e.EVENT_CAT_CD=c.EVENT_CAT_CD and c.EVENT_CAT_CD=? and c.lang_tp_cd=?

ProcessActionDAO_findByPK=select PROCESSACTION_ID, PROCESSCON_ID, ENTITYEVENTCAT_ID, NEXT_PROCESS_DT, EVENT_STATUS, LAST_UPDATE_DT, LAST_UPDATE_USER from PROCESSACTION where PROCESSACTION_ID=?

ProcessActionDAO_findByProcessControlId=select PROCESSACTION_ID, PROCESSCON_ID, ENTITYEVENTCAT_ID, NEXT_PROCESS_DT, EVENT_STATUS, LAST_UPDATE_DT, LAST_UPDATE_USER from PROCESSACTION where PROCESSCON_ID=?

ProcessActionDAO_findByProcessControlIdandEntityEventCatId=select PROCESSACTION_ID, PROCESSCON_ID, ENTITYEVENTCAT_ID, NEXT_PROCESS_DT, EVENT_STATUS, LAST_UPDATE_DT, LAST_UPDATE_USER from PROCESSACTION where PROCESSCON_ID=? and ENTITYEVENTCAT_ID=?

ProcessControlDAO_findByPK=select PROCESSCON_ID, PROCESSCON_INST_PK, PRODENTITY_ID, NEXT_PROCESS_DT, LAST_UPDATE_DT, LAST_UPDATE_USER from ProcessControl where processcon_id=?

ProcessControlDAO_findByProdEntityCdandPrConInstPk=select PROCESSCON_ID, PROCESSCON_INST_PK, PRODENTITY_ID, NEXT_PROCESS_DT, LAST_UPDATE_DT, LAST_UPDATE_USER from ProcessControl where prodentity_id=? and processcon_inst_pk=?

ProdEntityDAO_findByPK=select PRODENTITY_ID, DWL_PROD_TP_CD, NAME, DESCRIPTION, LAST_UPDATE_DT, LAST_UPDATE_USER from PRODENTITY where PRODENTITY_ID=?

ProdEntityDAO_findByBusSysIDandEntity=select p.PRODENTITY_ID, p.DWL_PROD_TP_CD, p.NAME, p.DESCRIPTION, p.LAST_UPDATE_DT, p.LAST_UPDATE_USER from PRODENTITY p, CDDWLPRODUCTTP dp where p.DWL_PROD_TP_CD=dp.DWL_PROD_TP_CD and dp.DWL_PROD_TP_CD=? and p.NAME=?

#------------------------------------------------------------------------------
# Getter method name for getting PartyId 
# from DWL Customer business objects
#------------------------------------------------------------------------------
Customer.PartyIdGetter.Default = getPartyId
Customer.PartyIdGetter.1 = com.dwl.tcrm.coreParty.component.TCRMPersonNameBObj, getPersonPartyId
Customer.PartyIdGetter.2 = com.dwl.tcrm.coreParty.component.TCRMOrganizationNameBObj, getOrganizationPartyId
Customer.PartyIdGetter.3 = com.dwl.tcrm.coreParty.component.TCRMOrganizationBObj, getOrganizationPartyId
Customer.PartyIdGetter.4 = com.dwl.tcrm.coreParty.component.TCRMSuspectOrganizationBObj, getOrganizationPartyId

#------------------------------------------------------------------------------
# Maxiumum amount of tasks that can be put into the task queue.
#------------------------------------------------------------------------------
#Item migrated into Configuration Manager as of 8.0.
#Use Configuration.getConfiguration().getConfigItem() to read its value.
#
#max_messages_in_tasks_queue = 500
# New name is: /IBM/EventManager/MessagesInQueue/max

#------------------------------------------------------------------------------
# The time (milliseconds) the longest task processing can take. If a task was 
# put in the queue and this specified time past, but the status of the PCT 
# is still 'IN PROGRESS', then the process of the task is dead.
#------------------------------------------------------------------------------
#Item migrated into Configuration Manager as of 8.0.
#Use Configuration.getConfiguration().getConfigItem() to read its value.
#
#max_processing_time = 3600000
# New name is: /IBM/EventManager/ProcessTime/max


#------------------------------------------------------------------------------
# ProcessControllerProxy properties
#
# The properties in this section is solely used
# for process controller proxy and are not
# used in server side.
#
# 1. min_task_process_factor: time (milliseconds) that at least the proxy 
#    should give the system to process one task
# 2. time_wait_for_idle: time (milliseconds) that the system should wait if 
#    there is no more PCT to be processed
# 3. time_wait_for_failing: time (milliseconds) that the system should wait 
#    if a process is failed
# 4. (Deprecated - Replaced with Log4J logger) logging_level:
#    The level of the logging information (the greater the 
#    number is, the more information will be logged). Valid values are: 0, 1, 2
# 5. (Deprecated - Replaced with Log4J logger) log_file:
#    The name of the log file. 
# 6. (Deprecated - Replaced with Log4J logger) max_log_size:
#    Maximum size (bytes) of the log file. If the file size is 
#    over the limit, it will be copied to <log_file>.bak. Only most recent 
#    backup file will be kept.
# 7. (Deprecated - Replaced with Log4J logger) log_flush_lines:
#    The maximum lines the log file can be writen without 
#    flush. The log file will be flushed when the condition of log_flush_lines 
#    or log_flush_time which ever meets first.
# 8. (Deprecated - Replaced with Log4J logger) log_flush_time:
#    The maximum time (milliseconds) the log file can be 
#    writen without flush. The log file will be flushed when the condition 
#    of log_flush_lines or log_flush_time which ever meets first.
#------------------------------------------------------------------------------
min_task_process_factor = 1000
time_wait_for_idle = 600000
time_wait_for_failing = 60000
#logging_level = 2
#log_file = ./logs/proxy.log
#max_log_size = 1000000
#log_flush_lines = 0
#log_flush_time = 600000


#------------------------------------------------------------------------------
# Properties for ValuePackageBusinessAdapter to connect to DWL Customer
#------------------------------------------------------------------------------
ValuePackageBusinessAdapter.Contract.JNDINAME=com/dwl/base/requestHandler/beans/DWLServiceController

#------------------------------------------------------------------------------
#Getter method name for getting ContractId
#------------------------------------------------------------------------------
Contract.ContractIdGetter.Default = getContractIdPK

#------------------------------------------------------------------------------
# Properties for ManagedAgreementTermConditionEvaluationRule to invoke processTask
#------------------------------------------------------------------------------
#EventManager.process_controller.jndi=ProcessController
#EventManager.process_controller.provider_url=corbaloc:iiop:<hostname>:<port>
#EventManager.process_controller.context_factory=com.ibm.websphere.naming.WsnInitialContextFactory

#------------------------------------------------------------------------------
# Properties for CommonBusinessAdapter to connect to Information platform
#------------------------------------------------------------------------------
CommonBusinessAdapter.JNDINAME=com/dwl/base/requestHandler/beans/DWLServiceController

#------------------------------------------------------------------------------
# In order to keep backward compatibility, the following new properties item to
# be defined in EventManager.properties with a default false value:
#------------------------------------------------------------------------------
EventDetectorMDB.RollbackOnFailure=false      

#------------------------------------------------------------------------------
#When EventStatus_LiteralValue_SQL_Enabled is true, the 3 new SQLs with literal 
#values of EventStatus(2, 3 and 4) are used.
#If the value is false or the configure entry is not added into EventManager.properties, 
#MDM Server functions same using original parameterized EventStatus SQL. 
#------------------------------------------------------------------------------
EventStatus_LiteralValue_SQL_Enabled=false
